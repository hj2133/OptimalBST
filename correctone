def optimal_bst(keys, p, n):
    cost = [[0 for _ in range(n+1)] for _ in range(n+2)]
    root = [[0 for _ in range(n+1)] for _ in range(n+2)]

    for i in range(1, n+1):
        cost[i][i] = p[i-1]
        root[i][i] = i

    for L in range(2, n+1):
        for i in range(1, n-L+2):
            j = i+L-1
            cost[i][j] = float('inf')
            sum_p_ij = sum(p[i-1:j])  
            for r in range(i, j+1):
                c = ((cost[i][r-1] if r > i else 0) + (cost[r+1][j] if r < j else 0) + sum_p_ij)
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r

    cost[n+1] = [0 for _ in range(n+1)]
    root[n+1] = [0 for _ in range(n+1)]

    cost_print = cost[1:]
    root_print = root[1:]

    return cost_print, root_print

def print_matrix(mat, label):
    print(label)
    for row in mat:
        print(" ".join(f"{v:.2f}" if isinstance(v, float) else str(v) for v in row))


keys = [35, 100, 120, 131]
p = [0.1, 0.2, 0.4, 0.3]
n = len(keys)


cost, root = optimal_bst(keys, p, n)


print_matrix(cost, "Cost Matrix:")
print_matrix(root, "Root Matrix:")
