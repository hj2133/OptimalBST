def optimal_bst(keys, p, n):
    cost = [[0 for x in range(n)] for y in range(n)]
    sum_p = [[0 for x in range(n)] for y in range(n)]

    for i in range(n):
        cost[i][i] = p[i]
        sum_p[i][i] = p[i]

    for L in range(2, n+1):
        for i in range(n-L+1):
            j = i+L-1
            cost[i][j] = float('inf')
            sum_p[i][j] = sum_p[i][j-1] + p[j] if i != j else p[j]
            for r in range(i, j+1):
                c = (cost[i][r-1] if r > i else 0) + \
                    (cost[r+1][j] if r < j else 0) + \
                    sum_p[i][j]
                if c < cost[i][j]:
                    cost[i][j] = c

    return cost[0][n-1]

keys = [10, 12, 20]
p = [0.34, 0.33, 0.33]
n = len(keys)

print("Cost of the optimal BST is:", optimal_bst(keys, p, n))
